<?php

/**
 * Implementation of hook_perm()
 *
 */
function cat_profile_perm() {
  // Magic permission to grant if a role is to always have all permissions
  return array('always have all permissions');
}

/**
 * Implementation of hook_user()
 *
 * If the user has a role that has the above-defined permission, they will be (re)granted all
 * known permissions. This effectively makes them a "user 1".
 *
 */
function cat_profile_user($op, &$edit, &$account, $category = null) {
  if ($op == 'login') {
    $users_roles = user_roles(true, 'always have all permissions');
    module_load_include('inc', 'cat_profile');
    foreach ($users_roles as $role) {
      cat_profile_role_ensure_all_perms($role);
    }
  }
}

/**
 * Implementation of hook_menu()
 */
function cat_profile_menu() {
  return array(
    'admin/reports/cat-profile-dump' => array(
      'access arguments' => array('administer site configuration'),
      'title' => 'Dump site variable(s)',
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cat_profile_var_dump_form'),
      'file' => 'cat_profile.inc'
    )
  );
}

/**
 * Implementation of hook_imagecache_default_presets
 *
 * @deprecated features supports imagecache settings.
 */
function cat_profile_imagecache_default_presets() {
  module_load_include('inc', 'cat_profile');
  return _cat_profile_imagecache_default_presets();
}

/**
 * Implementation of hook_features_api().
 * @author Josh Waihi <josh@catalyst.net.nz>
 * @author Elliot Pahl <elliot@catalyst.net.nz>
 */
function cat_profile_features_api() {
  $features = array();

  // Core
  $features['cat_profile_blocks'] = array(
    'name' => t('Blocks'),
    'default_hook' => 'cat_profile_blocks',
    'default_file' => FEATURES_DEFAULTS_INCLUDED,
    'file' => drupal_get_path('module', 'cat_profile') .'/cat_profile.features.inc',
  );
  $features['cat_profile_boxes'] = array(
    'name' => t('Boxes'),
    'default_hook' => 'cat_profile_boxes',
    'default_file' => FEATURES_DEFAULTS_INCLUDED,
    'file' => drupal_get_path('module', 'cat_profile') .'/cat_profile.features.inc',
  );
  $features['cat_profile_roles'] = array(
    'name' => t('Roles'),
    'default_hook' => 'cat_profile_perms',
    'default_file' => FEATURES_DEFAULTS_INCLUDED,
    'file' => drupal_get_path('module', 'cat_profile') .'/cat_profile.features.inc',
  );
  $features['cat_profile_url_aliases'] = array(
    'name' => t('Path'),
    'default_hook' => 'cat_profile_url_aliases',
    'default_file' => FEATURES_DEFAULTS_INCLUDED,
    'file' => drupal_get_path('module', 'cat_profile') .'/cat_profile.features.inc',
  );
  $features['cat_profile_taxonomy'] = array(
    'name' => t('Taxonomy'),
    'default_hook' => 'cat_profile_taxonomy',
    'default_file' => FEATURES_DEFAULTS_INCLUDED,
    'file' => drupal_get_path('module', 'cat_profile') .'/cat_profile.features.inc',
  );

  // Contrib
  if (module_exists('messaging')) {
    // Ensure the correct version of messaging
    $messaging_info = unserialize(db_result(db_query("SELECT info FROM {system} WHERE name = 'messaging'")));
    if (preg_match('/^6\.x-2\./', $messaging_info['version'])) {
      $features['cat_profile_messaging'] = array(
        'name' => t('Messaging'),
        'default_hook' => 'cat_profile_messaging',
        'default_file' => FEATURES_DEFAULTS_INCLUDED,
        'file' => drupal_get_path('module', 'cat_profile') .'/cat_profile.features.inc',
      );
    }
  }
  if (module_exists('workflow')) {
    $features['cat_profile_workflow'] = array(
      'name' => t('Workflow'),
      'default_hook' => 'cat_profile_workflow_data',
      'default_file' => FEATURES_DEFAULTS_INCLUDED,
      'default_filename' => 'features.cat_profile.inc',
      'file' => drupal_get_path('module', 'cat_profile') .'/cat_profile.features.inc',
    );
  }
  if (module_exists('homebox')) {
    $features['cat_profile_homebox'] = array(
      'name' => t('Homebox'),
      'default_hook' => 'cat_profile_homebox',
      'default_file' => FEATURES_DEFAULTS_INCLUDED,
      'default_filename' => 'features.cat_profile.inc',
      'file' => drupal_get_path('module', 'cat_profile') .'/cat_profile.features.inc',
    );
  }

  return $features;
}

/**
 * Implementation of hook_features_export_alter
 *
 * Add addional exports not added by features modules to certain components.
 * @author Josh Waihi <josh@catalyst.net.nz>
 */
function cat_profile_features_export_alter(&$export, $module_name) {
  if (module_exists('pathauto') && isset($export['node'])) {
    foreach ($export['node'] as $key => $value) {
      $export['variable']['pathauto_node_' . $key . '_pattern'] = 'pathauto_node_' . $key . '_pattern';
    }
  }
}

/**
 * Implementation of hook_postinst().
 *
 * Add custom actions to post install of debian package.
 * @see drush dh-make-drupal
 */
function cat_profile_postinst() {
  $output = '';
  // If the Print PDF module is using wkhtmltopdf, there are two different
  // binaries, one for 64-bit and one for 32bit. We should symlink the correct
  // version based on the server environment.
  if (module_exists('print_pdf')) {
    $wkhtmltopdf = drupal_get_path('module', 'print') . '/lib/wkhtmltopdf';
    if (file_exists($wkhtmltopdf . '-i386') && file_exists($wkhtmltopdf . '-amd64')) {
      $output .= '$wkhtmltopdf = WEBROOT . "/' . $wkhtmltopdf . '";' . PHP_EOL;
      $output .= 'if (!is_link($wkhtmltopdf)) {' . PHP_EOL;
      $output .= '  deb_shell_exec("uname -m");' . PHP_EOL;
      $output .= '  $machine = trim(implode("", deb_shell_exec_output()));' . PHP_EOL;
      $output .= '  if ($machine == "x86_64") {' . PHP_EOL;
      $output .= '    symlink($wkhtmltopdf . "-amd64", $wkhtmltopdf);' . PHP_EOL;
      $output .= '  }' . PHP_EOL;
      $output .= '  else {' . PHP_EOL;
      $output .= '    symlink($wkhtmltopdf . "-i386", $wkhtmltopdf);' . PHP_EOL;
      $output .= '  }' . PHP_EOL;
      $output .= '}' . PHP_EOL;
    }
  }
  return $output;
}
