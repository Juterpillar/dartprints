<?php

/**
 * The default period of time between cron runs for a module.
 */
define("CRONQUEUE_DEFAULT_FREQUNECY", 900);

/**
 * Implementation of hook_menu
 */
function cronqueue_menu() {
  return array(
    'admin/settings/cronqueue' => array(
      'title' => 'Cron Administration',
      'description' => 'Manage Cron tasks and how frequently they have run',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cronqueue_settings'),
      'access arguments' => array('administer site configuration'),
    ),
  );
}

/**
 * Implementation of hook_theme
 */
function cronqueue_theme() {
  return array(
    'cronqueue_settings' => array(
      'arguments' => array('form' => array()),
    ),
  );
}

/**
 * Load the Beanstalk library
 */
function cronqueue_load_beanstalk() {
  if (class_exists('Pheanstalk')) {
    return TRUE;
  }
  require_once dirname(__FILE__) . '/pheanstalk/pheanstalk_init.php';
}

/**
 * Provision cron tasks to a queue.
 */
function cronqueue_provision() {
  cronqueue_load_beanstalk();

  $servers = explode(',', variable_get('cronqueue_beanstalkd_servers', '127.0.0.1:11300'));
  array_walk($servers, 'trim');

  $stalks = array();

  foreach ($servers as $idx => $server) {
    list($host, $port) = explode(':', $server);
    $stalks[$idx] = new Pheanstalk($host, $port);
    $stalks[$idx]->useTube('drupal/cronqueue');
  }

  reset($stalks);

  $job = array(
    'module' => '',
    'www' => DRUPAL_ROOT,
    'host' => $_SERVER['HTTP_HOST'],
  );

  // Retrieve cron tasks ready to be run again.
  $rs = db_query("SELECT module FROM {cronqueue_frequency} WHERE (last_run IS NULL OR last_run < (%d - frequency)) AND frequency <> 0", time());
  while ($module = db_result($rs)) {
    $job['module'] = $module;
    current($stalks)->put(json_encode((object) $job));
    if (next($stalks) === FALSE) {
      reset($stalks);
    }
    drush_print("Provisioned $module to queue.");
  }
}

/**
 * Invoke cron for a module.
 */
function cronqueue_invoke($module) {
  // If the process is already going for this module
  // there is not point in waiting to run it again, just
  // return which will delete the job. Set the timeout
  // quite high as we don't know how long a cron task
  // may take.
  if (!lock_acquire('cronqueue_' . $module, 900)) {
    drush_log("$module cron already running. Exiting..");
    return;
  }
   
  // Firstly update the date this task was last updated so
  // a cron run doesn't provision this task again too soon.
  $row = array('module' => $module, 'last_run' => time());
  if (db_result(db_query("SELECT 1 FROM {cronqueue_frequency} WHERE module='%s'", $module))) {
    drupal_write_record('cronqueue_frequency', $row, array('module'));
  }
  else {
    drupal_write_record('cronqueue_frequency', $row);
  }

  module_invoke($module, 'cron');

  lock_release('cronqueue_' . $module);
}

/**
 * Cron UI administration page
 *
 * @see theme_cronqueue_settings
 */
function cronqueue_settings() {

  $settings = array();
  $rs = db_query("SELECT * FROM {cronqueue_frequency}");
  while ($row = db_fetch_object($rs)) {
    $settings[$row->module] = $row;
  }

  // Interval lengths
  $intervals = array(
    0   => t('disabled'),
    60     => t('every minute'),
    300    => t('every 5 minutes'),
    600    => t('every 10 mintues'),
    CRONQUEUE_DEFAULT_FREQUNECY => t('every 15 minutes'),
    1800   => t('every half hour'),
    3600   => t('every hour'),
    10800  => t('every 3 hours'),
    21600  => t('every 6 hours'),
    43200  => t('every 12 hours'),
    86400  => t('every 24 hours'),
    129600 => t('every 36 hours'),
    172800 => t('every 48 hours'),
  );

  $form = array();

  $form['beanstalkd_servers'] = array(
    '#title' => 'Beanstalkd Servers',
    '#required' => TRUE,
    '#type' => 'textfield',
    '#description' => 'Space seperated list of Beanstalkd servers used for queuing cron tasks',
    '#default_value' => variable_get('cronqueue_beanstalkd_servers', '127.0.0.1:11300'),
  );

  foreach (module_implements('cron') as $module) {
    // Set the default interval to 1 hour.
    $value = isset($settings[$module]) ? $settings[$module]->frequency : CRONQUEUE_DEFAULT_FREQUNECY;
    $form['options'][$module] = array('#type'=> 'select', '#options' => $intervals, '#default_value' => $value);
    if (isset($settings[$module]->last_run)) {
      $form['info'][$module] = array('#value' => format_date($settings[$module]->last_run, 'large'), '#tree' => TRUE);
    }
  }
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save permissions'));

  return $form;
}


/**
 * Submission handler for cron admin settings
 */
function cronqueue_settings_submit($form, &$form_state) {
  $values = $form_state['values'];
  foreach ($values as $module => $freq) {
    if (module_exists($module)) {
      $row = array('module' => $module, 'frequency' => is_numeric($freq) ? $freq : 0);
      if (db_result(db_query("SELECT 1 FROM {cronqueue_frequency} WHERE module = '%s'", $module))) {
        drupal_write_record('cronqueue_frequency', $row, array('module'));
      }
      else {
        drupal_write_record('cronqueue_frequency', $row);
      }
    }
  }
  variable_set('cronqueue_beanstalkd_servers', $values['beanstalkd_servers']);

  drupal_set_message('Cron intervals have been saved');
} 
  

/**
 * Theme administration form for cron ui
 */
function theme_cronqueue_settings($form) {
  $rows = array();
  foreach (element_children($form['options']) as $key) {
    $row = array($key, drupal_render($form['options'][$key]));
    $row[] = isset($form['info'][$key]) ? drupal_render($form['info'][$key]) : 'never';
    $rows[] = $row;
  } 
  $output .= theme('table', array('Module', 'Interval', 'Last ran'), $rows, array('id' => 'cron-ui-admin-table'));
  $output .= drupal_render($form);
  return $output;
} 
