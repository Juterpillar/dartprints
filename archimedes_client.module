<?php

include "archimedes.class.php";

/**
* Implementation of hook_menu().
*/
function archimedes_client_menu() {
  $items = array();
  $items['admin/reports/archimedes'] = array(
    'title' => t('Archimedes'),
    'access arguments' => array('access administration pages'),
    'page callback' => 'archimedes_out',
    'description' => t('Administer Archimedes'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/reports/archimedes/update'] = array(
    'title' => t('Archimedes'),
    'access arguments' => array('access administration pages'),
    'page callback' => 'archimedes_send_force',
    'type' => MENU_CALLBACK,
  );
  $items['admin/reports/archimedes/data'] = array(
    'title' => t('Data'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/reports/archimedes/settings'] = array(
    'title' => t('Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('archimedes_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
   );
   $items['admin/reports/archimedes/export'] = array(
    'title' => t('XML Export'),
    'page callback' => 'archimedes_export',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
   );
  return $items;
} // archimedes_client_menu()


function archimedes_out() {
  $owl = archimedes_update();

  $header = array('Name','Version');

  $rows = array(
    array('Site title',implode(', ',$owl->getField('title')->getValues())),
    array('Description',implode(', ',$owl->getField('body')->getValues())),
    array('Servername',implode(', ',$owl->getField('field_servername')->getValues())),
    array('Web Server',implode(', ',$owl->getField('field_webserver')->getValues())),
    array('Web Root',implode(', ',$owl->getField('field_webroot')->getValues())),
    array('DB Host',implode(', ',$owl->getField('field_dbhost')->getValues())),
    array('DB Name',implode(', ',$owl->getField('field_dbname')->getValues())),
    array('Users',implode(', ',$owl->getField('field_users')->getValues())),
    array('DB Size',implode(', ',$owl->getField('field_db_size')->getValues())),
    array('Site Data Size',implode(', ',$owl->getField('field_sitedata')->getValues())),
    array('Webroot Size',implode(', ',$owl->getField('field_sitesize')->getValues())),
    array('User Count',implode(', ',$owl->getField('field_num_users')->getValues())),
    array('Modules',theme('table',$header,$owl->getField('field_drupal_mod')->getValues())),
    array('Themes',theme('table',$header,$owl->getField('field_drupal_theme')->getValues())),
  );


  $rows = array_merge($rows, module_invoke_all('archimedes_rows', $owl)); // dirty, should send rows by reference and be added

  $header = array('Component', 'Value');
  $output = '<p>This page shows the current output from of Archimedes Client for this website. It will not necessarily match what is known by the server.</p>';
  $output .= '<p>' . l('Force server update','admin/reports/archimedes/update') . ' | ' . l('View data on server', variable_get('archimedes_server_location','')) . '</p>';
  return $output . theme('table', $header, $rows);


} // archimedes_out()


function archimedes_export() {
  $owl = archimedes_update();

  return '<pre>' . htmlentities($owl->toXML()) . '</pre>';

} // archimedes_export()

function archimedes_update() {

  global $db_url, $db_type;

  // Produce a unique value to represent this instance of Drupal.
  $keys = module_invoke_all('archimedes_client_id');
  sort($keys);
  $owl = new Archimedes('drupal', variable_get('site_mail', FALSE), md5(implode('', $keys)));

  $owl->createField('title', variable_get('site_name', "unknown"));

  if (variable_get('archimedes_description', '') != '') {
    $nid = arg(1,drupal_get_normal_path(variable_get('archimedes_description', 'node')));
    $node = node_load($nid);
    $body = substr(drupal_html_to_text($node->body,array('b','strong','i','em','p')),0,500);
    $owl->createField('body', $body);
  } else {
    $owl->createField('body', variable_get('site_mission', 'No description has been set.'));
  }

  $protocol = strpos(strtolower($_SERVER['SERVER_PROTOCOL']),'https') === FALSE ? 'http://' : 'https://';
  $owl->createField('field_servername', $protocol . $_SERVER["SERVER_NAME"]);

  $hostname = archimedes_shell_exec("hostname -f");
  $owl->createField('field_webserver', $hostname);
  $owl->createField('field_webroot', 'file://' . $_SERVER["DOCUMENT_ROOT"]);

  $db = parse_url($db_url);
  $dbName = substr($db['path'],1);
  $hostname = ($db['host'] == 'localhost') ? $hostname : $db['host'];

  $owl->createField('field_dbhost', $hostname);
  $owl->createField('field_dbname', $dbName);

  $owl->createField('field_users', 'mailto:' . db_result(db_query("SELECT u.mail FROM {users} u WHERE uid = 1 LIMIT 1")));

  switch ($db_type) {
    case 'pgsql':
      $owl->createField('field_db_size', db_result(db_query("SELECT pg_database_size('" . $dbName . "')")));
    break;
    case 'mysql':
    case 'mysqli':
      $rs = db_query("SHOW TABLE STATUS");
      $size = 0;
      while ($row = db_fetch_object($rs)) {
        $size += ($row->Data_length + $row->Index_length);
      }
      $owl->createField('field_db_size', $size);
    break;
  }

  $dataSize = preg_split('/[\s]+/',archimedes_shell_exec("du -bsL " . $_SERVER['DOCUMENT_ROOT'] . base_path() . file_directory_path()));
  $owl->createField('field_sitedata', $dataSize[0]);

  $rootSize = preg_split('/[\s]+/',archimedes_shell_exec("du -bsL " . $_SERVER['DOCUMENT_ROOT'] . base_path()));
  $owl->createField('field_sitesize', $rootSize[0]);

  $owl->createField('field_num_users', db_result(db_query("SELECT COUNT(uid) FROM {users}"))-1); // subtract one for public user

  $modules = $themes = array();
  foreach (module_list() as $module) {
    $info = drupal_parse_info_file(drupal_get_path('module', $module) '/' . $module . '.info');
    $node = array(
      'title' => $info['name'],
      'body'  => $info['description'],
      'package' => $info['package'],
      'project' => $info['project'],
    );
    $value = archimedes_value($info['name'], 'drupalmod')
              ->addNode($node)
              ->setVersion($info['version']);
    $modules[] = $value;
  }
  $owl->createField('field_drupal_mod', $modules);

  $result = db_query("SELECT d.name FROM {system} d WHERE d.status = 1 AND d.type = 'theme'");
  while ($theme = db_result($result)) {
    $info = drupal_parse_info_file(drupal_get_path('theme', $theme) . '/' . $theme . '.info');
    $node = array(
      'title' => $info['name'],
      'body'  => $info['description'],
    );
    $value = archimedes_value($info['name'], 'drupalmod')
              ->addNode($node)
              ->setVersion($info['version']);
    $themes[] = $value;
  }
  $owl->createField('field_drupal_theme', $themes);

  // Allow other modules to add data via hook_archimedes.
  // TODO: rewrite hook as archimedes_client.
  drupal_alter('archimedes', $owl);

  return $owl;
} // archimedes_update()

/**
 * Implementation of hook_archimedes_client_id().
 */
function archimedes_client_archimedes_client_id() {
  return $_SERVER['DOCUMENT_ROOT'];
}


function archimedes_admin() {
  $form = array();

  $form['archimedes_server_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Server email address'),
    '#default_value' => variable_get('archimedes_server_email', 'archimedes@server.com'),
    '#description' => t('Set Archimedes server email address.'),
  );

  $form['archimedes_server_location'] = array(
    '#type' => 'textfield',
    '#title' => t('Server web address'),
    '#default_value' => variable_get('archimedes_server_location', 'http://server.com'),
    '#description' => t('Set Archimedes server web address.'),
  );

  $form['archimedes_server_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Server Public Key'),
    '#default_value' => variable_get('archimedes_server_key', ''),
    '#description' => t('Set the public key for the Archimedes server.'),
  );

  $form['archimedes_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description node'),
    '#size' => 40,
    '#default_value' => variable_get('archimedes_description', ''),
    '#field_prefix' => url(NULL, array('absolute' => TRUE)) . (variable_get('clean_url', 0) ? '' : '?q='),
    '#description' => t('Set the path where Archimedes can find a description for the site. If left blank, the Site Mission is used.'),
  );

  $form['archimedes_cron_update'] = array(
    '#type' => 'textfield',
    '#title' => t('Cron upate every x days'),
    '#size' => 5,
    '#default_value' => variable_get('archimedes_cron_update', 1),
    '#description' => t('Set Archimedes cron update period.'),
  );

  return system_settings_form($form);
}

/**
 * Send an report to the Archimedes server via email.
 *
 * Doesn't use Drupal's messaging system because the communication
 * with the server is independant of Drupal.
 */
function archimedes_send() {
  $server_email = variable_get('archimedes_server_email','');
  $server_key = variable_get('archimedes_server_key','');
  $site_name  = variable_get('site_name', 'unknown');

  $owl = archimedes_update();

  if ($server_email != '' && $server_key != '') {
    $site_name  = variable_get('site_name', 'unknown');
    if ($owl->sendXML('Archimedes Server <' . $server_email . '>', $site_name, $server_key))
      drupal_set_message('Update sent successfully via email to '  . $server_email . '. This many take some time to become visible on the server.');
    else
      drupal_set_message('Update failed to send for an unknown reason.','error');
  } else {
    if ($server_email == '')
      drupal_set_message('Update failed to send as the ' . l('server email address','admin/reports/archimedes/settings') . ' is not yet set.','error');
    if ($server_key == '')
      drupal_set_message('Update failed to send as the ' . l('server server public key','admin/reports/archimedes/settings') . ' is not yet set.','error');
  }
}

/**
 * Drupal UI callback to force Archimedes client to send a report.
 */
function archimedes_send_force() {
  archimedes_send();
  drupal_goto('admin/reports/archimedes');
}

/**
 * Execute a shell command.
 *
 * Abstracted from Drush.
 */
function archimedes_shell_exec($cmd) {
  $args = func_get_args();

  //do not change the command itself, just the parameters.
  for ($x = 1; $x < sizeof($args); $x++) {
    $args[$x] = escapeshellarg($args[$x]);
  }
  $command = call_user_func_array('sprintf', $args);

  exec($command . ' 2>&1', $output, $result);

  return $output[0];
} // archimedes_shell_exec()
